import numpy as np
import ArrayStack
import BinaryTree
import ChainedHashTable
import DLList
import operator

class Calculator:
    def __init__(self) :
        self.dict = ChainedHashTable.ChainedHashTable(DLList.DLList)

    def set_variable(self, k :str, v : float) :
        self.dict.add(k,v)
            
            
    def matched_expression(self, s : str) -> bool :
        # todo
        stack = ArrayStack.ArrayStack()
        if s == "":
            return False
        if stack.size() != 0 and stack[0] == ')':
            return False
        s = '(' + s + ')'
        for character in s:
            if character == '(':
                stack.push(character)
            elif character == ')' and stack.size() != 0:
                stack.pop()
            elif stack.size() == 0:
                return False

        if stack.size() == 0:
            return True
        else:
            return False

            
        pass 

    def build_parse_tree(self, exp : str) ->str:
        # todo
        #Variables have no children import operator as op own there
        t = BinaryTree.BinaryTree()
        t.r = BinaryTree.BinaryTree.Node("")
        u = t.r
        
        while exp != None:
            if exp == '(':
                #add a left child = u
                u = u .left
            if exp == '+' or exp == '-' or exp == '*':
                u.x = exp
                #add a rightchild = u
                u = u.right
            if exp == operand:
                u.x = exp
                u = u.parent
            if exp == ')':
                u = u.parent
        return t

    def _evaluate(self, root):
        op = { '+':operator.add, '-':operator.sub, '*':operator.mul, '/':operator.truediv}
        # todo
        if root.left != None and root.right != None:
            fn = op[root.x]
            return fn[self._evaluate(root.left), self._evaluate(root.right)]
        else:
            t = self.dict.find(root.x)
            if t != None:
                return t
            return root.x
            
    def evaluate(self, exp):
        parseTree = self.build_parse_tree(exp)
        return self._evaluate(parseTree.r)
        
        
